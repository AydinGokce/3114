
public class Graph {
	Vertex[] DijkstraTable;

	Graph(int numVertices, int sourceIndex) {
		this.DijkstraTable = new Vertex[numVertices];

		// initialize table with empty vertex objects, representing disconnected
		// vertices
		for (int i = 0; i < this.DijkstraTable.length; i++) {
			this.DijkstraTable[i] = new Vertex();
		}

	}

	public void addEdge(int sourceIndex, int destIndex, int weight) {
		Edge newEdge = new Edge(destIndex, weight);
		this.DijkstraTable[sourceIndex].addSuccessor(newEdge);
	}
	
	//return false when all best paths are found
	public boolean iterateSSAD() {
		return false;
	}
	
	private String stringHelper(int strlen) {
		String pad = "";
		int padding = 6;
		String padChar = " ";
		int remainingPadding = padding - strlen;
		
		for(int i = 0; i < remainingPadding; i++) {
			finalString += padChar;
		}
	}
	
	
	public String toString() {
		
		
		
		
		String finalString = "Node";
		int remainingPadding = padding - finalString.length();
		
		
		finalString += "|";
		finalString += " Successors\n";
		finalString += "----------------------------------------------------------------------";
		finalString += 
		
	}

}
