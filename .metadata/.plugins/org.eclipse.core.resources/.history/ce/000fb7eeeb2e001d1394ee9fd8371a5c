
import java.lang.reflect.Array;
import java.util.Random;
import student.TestableRandom;

public class SkipList<K extends Comparable<K>, E> {

    // ---------------- SKIPNODE CLASS ---------------- //
    // COPIED FROM OPENDSA
    private class SkipNode<K extends Comparable<K>, E> {
        private KVPair<K, E> rec;
        private SkipNode<K, E>[] forward;

        public E element() {
            return rec.value();
        }


        public K key() {
            return rec.key();
        }


        @SuppressWarnings("unchecked")
        public SkipNode(KVPair<K, E> kvPair, int level) {
            rec = kvPair;
            forward = new SkipNode[level + 1];
            for (int i = 0; i < level; i++)
                forward[i] = null;
        }


        @SuppressWarnings("unchecked")
        public SkipNode(K key, E value, int level) {
            rec = new KVPair<K, E>(key, value);
            forward = new SkipNode[level + 1];
            for (int i = 0; i < level; i++)
                forward[i] = null;
        }


        public String toString() {
            if(this.rec == null) {
                System.out.println("rec is null!");
            }
            return rec.toString();
        }
    }
    // ------------------------------------------------ //

    private SkipNode<K, E> head;
    private Random rnd;
    private int level;
    private int size;

    // START: rectangle-specific members ----
    private final int MAX_HEIGHT = 1024;
    private final int MAX_WIDTH = 1024;
    // END: rectangle-specific members ----

    public SkipList() {
        this.rnd = new TestableRandom();
        this.head = new SkipNode<K, E>(null, 0);
        this.level = -1;
        this.size = 0;
    }


    /** Pick a level using a geometric distribution */
    public int randomLevel() {
        int lev;
        for (lev = 0; rnd.nextBoolean(); lev++)
            ; // advance level
        return lev;
    }


    /** Insert a KVPair into the skiplist */
    public boolean insert(KVPair<K, E> it) {
        if (validateInsertion(it)) {
            int newLevel = randomLevel();
            Comparable<K> k = it.key();
            if (level < newLevel)
                adjustHead(newLevel);
            @SuppressWarnings("unchecked") // Generic array allocation
            SkipNode[] update = (SkipNode[])Array.newInstance(
                SkipList.SkipNode.class, level + 1);
            SkipNode<K, E> x = head; // Start at header node
            for (int i = level; i >= 0; i--) { // Find insert position
                while ((x.forward[i] != null) && (k.compareTo((K)(x.forward[i])
                    .key()) > 0))
                    x = x.forward[i];
                update[i] = x; // Track end at level i
            }
            x = new SkipNode<K, E>(it, newLevel);
            for (int i = 0; i <= newLevel; i++) { // Splice into list
                x.forward[i] = update[i].forward[i]; // Who x points to
                update[i].forward[i] = x; // Who y points to
            }
            size++; // Increment dictionary size
            return true;
        }
        else {
            return false;
        }
    }


    public void dump() {
        System.out.println("SkipList dump:");
        SkipNode<K, E> x = head;
        while (x != null) {
            System.out.println("Node has depth " + x.forward.length + ", Value " + (x == head ? "null" : "non null"));
            x = x.forward[0];
        }
        System.out.println("SkipList size is: " + this.size);
    }

    
    public int size() {
        return this.size;
    }

    // COPIED FROM OPENDSA
    private void adjustHead(int newLevel) {
        SkipNode<K, E> temp = head;
        head = new SkipNode<K, E>(null, newLevel);
        for (int i = 0; i <= level; i++)
            head.forward[i] = temp.forward[i];
        level = newLevel;
    }

    // START: rectangle-specific functions --------


    // validates rectangle against max with and max height, assuming bounds are
    // inclusive
    @SuppressWarnings("unchecked")
    private boolean validateInsertion(KVPair it) {
        E elem = (E)it.theVal;
        if (((int[])elem).length != 4) {
            return false;
        }

        for (int i = 0; i < ((int[])elem).length; i++) {
            if (((int[])elem)[i] < 0) {
                return false;
            }
        }

        if (((int[])elem)[0] + ((int[])elem)[2] > this.MAX_WIDTH
            || ((int[])elem)[1] + ((int[])elem)[3] > this.MAX_HEIGHT) {
            return false;
        }

        return true;
    }

    // END: rectangle-specific functions --------
}
