package main;

import java.lang.reflect.Array;
import java.util.Random;
import student.TestableRandom;

public class SkipList<K extends Comparable<K>, E> {

    // ---------------- SKIPNODE CLASS ---------------- //
    // COPIED FROM OPENDSA
    private class SkipNode<K extends Comparable<K>, E> {
        private KVPair<K, E> rec;
        private SkipNode<K, E>[] forward;

        public E element() {
            return rec.value();
        }


        public K key() {
            return rec.key();
        }


        @SuppressWarnings("unchecked")
        public SkipNode(KVPair<K, E> kvPair, int level) {
            rec = kvPair;
            forward = new SkipNode[level + 1];
            for (int i = 0; i < level; i++)
                forward[i] = null;
        }


        public String toString() {
            return rec.toString();
        }
    }
    // ------------------------------------------------ //

    private SkipNode<K, E> head;
    private Random rnd;
    private int level;
    private int size;

    public SkipList() {
        this.rnd = new TestableRandom();
        this.head = new SkipNode<K, E>(null, 0);
        this.level = -1;
        this.size = 0;
    }


    /** Pick a level using a geometric distribution */
    public int randomLevel() {
        int lev;
        for (lev = 0; rnd.nextBoolean(); lev++)
            ; // advance level
        return lev;
    }


    // COPIED FROM OPENDSA
    /** Insert a key, element pair into the skip list */
    public void insert(K key, E elem) {
        int newLevel = randomLevel(); // New node's level
        if (newLevel > level) // If new node is deeper
            adjustHead(newLevel); // adjust the header
        // Track end of level
        SkipNode<K, E>[] update = new SkipNode[level + 1];
        SkipNode<K, E> x = head; // Start at header node
        for (int i = level; i >= 0; i--) { // Find insert position
            while ((x.forward[i] != null) && (x.forward[i].key().compareTo(
                key) < 0))
                x = x.forward[i];
            update[i] = x; // Track end at level i
        }
        x = new SkipNode<K, E>(key, elem, newLevel);
        for (int i = 0; i <= newLevel; i++) { // Splice into list
            x.forward[i] = update[i].forward[i]; // Who x points to
            update[i].forward[i] = x; // Who points to x
        }
        size++; // Increment dictionary size
    }


    // COPIED FROM OPENDSA
    private void adjustHead(int newLevel) {
        SkipNode<K, E> temp = head;
        head = new SkipNode<K, E>(null, newLevel);
        for (int i = 0; i <= level; i++)
            head.forward[i] = temp.forward[i];
        level = newLevel;
    }
}
