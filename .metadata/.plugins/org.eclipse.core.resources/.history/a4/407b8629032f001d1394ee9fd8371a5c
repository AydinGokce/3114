
public class Coordinates {

    private int x;
    private int y;
    private int w;
    private int h;

    private final int MAX_HEIGHT = 1024;
    private final int MAX_WIDTH = 1024;
    private final int MIN_X = 0;
    private final int MIN_Y = 0;

    public Coordinates(int x, int y, int w, int h) {

        if (x + w > this.MAX_HEIGHT || y + h > this.MAX_HEIGHT) {
            throw new IllegalArgumentException("Rectangle out of bounds!");
        }
        if (x < this.MIN_X || y < this.MIN_Y) {
            throw new IllegalArgumentException(
                "X or Y is below minimum valid value!");
        }
        if (w <= 0 || h <= 0) {
            throw new IllegalArgumentException(
                "W and H must be positive nonzero!");
        }

        this.x = x;
        this.y = y;
        this.w = w;
        this.h = h;
    }


    public boolean equals(Object o) {
        if (o == null) {
            return false;
        }
        if (!(o.getClass().equals(this.getClass()))) {
            return false;
        }
        Coordinates coordsified = (Coordinates)o;
        if (coordsified.x == this.x && coordsified.y == this.y
            && coordsified.h == this.h && coordsified.w == this.w) {
            return true;
        }
        return false;
    }

    public boolean intersects(Coordinates c) {
        return intersectsHelper(c, true) && intersectsHelper(c, false);
    }

    private boolean intersectsHelper(Coordinates c, boolean mode) {
        
        Coordinates first = c;
        Coordinates second = this;
        
        if(mode) {
            first = this;
            second = c;
        }
        
        int[][] corners = new int[][] { { x, y }, { x + w, y }, { x + w, y
            + h }, { x, y + h } };

        for (int i = 0; i < corners.length; i++) {
            if (corners[i][0] >= c.x && corners[i][1] >= c.y) {
                if ((corners[i][0] <= c.x + c.w) && (corners[i][1] <= c.y
                    + c.h)) {
                    return true;
                }
            }
        }
        return false;
    }


    public String toString() {
        return this.x + ", " + this.y + ", " + this.w + ", " + this.h;
    }
}
