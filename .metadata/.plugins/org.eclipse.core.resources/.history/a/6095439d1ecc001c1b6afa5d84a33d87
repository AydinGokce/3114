import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

public class Graph {
	private Vertex[] DijkstraTable;
	private int sourceIndex;
	private MinHeap heap;
	private Set<Integer> processed;
	

	Graph(int numVertices, int sourceIndex) {
		this.DijkstraTable = new Vertex[numVertices];
		this.heap = new MinHeap(numVertices);
		// initialize table with empty vertex objects, representing disconnected
		// vertices
		for (int i = 0; i < this.DijkstraTable.length; i++) {
			this.DijkstraTable[i] = new Vertex(i);
		}
		this.sourceIndex = sourceIndex;
		processed = new HashSet<Integer>();

	}

	public void addEdge(int sourceIndex, int destIndex, int weight) {
		Edge newEdge = new Edge(destIndex, weight);
		this.DijkstraTable[sourceIndex].addSuccessor(newEdge);
	}

	private String padAfter(int strlen, int padding, String padChar) {
		String pad = "";

		int remainingPadding = padding - strlen;

		for (int i = 0; i < remainingPadding; i++) {
			pad += padChar;
		}
		return pad;
	}
	
	public void iterateSSAD() {

		this.DijkstraTable[this.sourceIndex].setDistance(0);
		heap.add(this.DijkstraTable[this.sourceIndex]);
		
		
		while (processed.size() != this.DijkstraTable.length) {

			if(this.heap.size() == 0) {
				return;
			}
			
			Vertex highestPriority = this.heap.poll();
			if(!processed.contains(highestPriority.getID())) {
				processed.add(highestPriority.getID());
				processNeighbors(highestPriority);
			}
			
		}
	}
	
	private void processNeighbors(Vertex v) {
		System.out.println("Current heap: " + heap.toString());
		for (int i = 0; i < v.getSuccessors().size(); i++) {

			if (!processed.contains(v.getID())) {
				Vertex successor = v.getSuccessors().get(i);
			}
		}
			
	}

	private String padBefore(int strlen, int padding, String padChar) {
		String pad = "";

		int remainingPadding = padding - strlen;

		for (int i = 0; i < remainingPadding; i++) {
			pad += padChar;
		}
		return pad;
	}

	public String toString() {

		int padding = 5;
		String padChar = " ";

		String finalString = "Node";
		finalString += padAfter(finalString.length() - 1, padding, padChar);

		finalString += "|";
		finalString += " Successors\n";
		finalString += "----------------------------------------------------------------------";

		Vertex currVertex;

		for (int i = 0; i < this.DijkstraTable.length; i++) {
			currVertex = this.DijkstraTable[i];
			finalString += "\n";
			finalString += padBefore(Integer.toString(i).length(), padding, padChar);
			finalString += Integer.toString(i);
			finalString += " |";

			Edge successor;

			for (int j = 0; j < currVertex.getSuccessors().size(); j++) {
				successor = currVertex.getSuccessors().get(j);

				String successorID = Integer.toString(successor.getSuccessor());
				String weight = Integer.toString(successor.getWeight());

				finalString += padBefore(successorID.length(), padding, padChar);
				finalString += successorID;
				finalString += ": ";
				finalString += padBefore(weight.length(), 2, padChar);
				finalString += weight;

			}
		}

		finalString += "\n\nStart vertex is: " + this.sourceIndex + "\n\n";

		String dest = "Dest | ";

		finalString += padBefore(0, dest.length(), padChar);
		finalString += "Total";
		finalString += "\n" + dest + "Weight | Path\n";
		finalString += "----------------------------------------------------------------------";

		for(int i = 0; i < this.DijkstraTable.length; i++) {
			currVertex = this.DijkstraTable[i];
			finalString += "\n";
			finalString += padBefore(Integer.toString(i).length(), padding, padChar);
			finalString += i;
			finalString += " |";
			finalString += padBefore(Integer.toString(currVertex.getDistance()).length(), padding, padChar);
			finalString += currVertex.getDistance();
			finalString += " |";
			
		}
		
		return finalString;

	}

}
