
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Rectangle1 {

    public static void main(String[] args) throws FileNotFoundException {

        // instantiate file and scanner
        File file = new File(args[0]);
        Scanner scanner = new Scanner(file);

        // instantiate skip list
        SkipList<String, Coordinates> skipList = new SkipList();

        // iterate over every line in the file
        while (scanner.hasNext()) {

            // parse the command and arguments to an array of strings
            String nextLine = scanner.nextLine();
            String[] command = parseCommand(nextLine);

            if (command.length > 1) {
                
                if (command[0].equals("insert") {
                    try {
                        Rectangle rect = new Rectangle(command[1], new Coordinates(
                            Integer.parseInt(command[2]), Integer.parseInt(command[3]),
                            Integer.parseInt(command[4]), Integer.parseInt(
                                command[5])));
                        skipList.insert(rect);
                        System.out.println("Rectangle inserted: " + rect.toString());
                    
                    }
                    catch (Exception e) {
                        Rectangle rect = new Rectangle(command[1], new Coordinates(
                            Integer.parseInt(command[2]), Integer.parseInt(command[3]),
                            Integer.parseInt(command[4]), Integer.parseInt(
                                command[5]), true));
                        System.out.print("Rectangle rejected: " + rect.toString());
                    }
                    
                }
                else if (command[0].equals("dump")) {

                }
                else if (command[0].equals("remove")  && command.length == 2) {

                }
                else if (command[0].equals("remove") && command.length == 5) {

                }
                else if (command[0].equals("regionsearch")) {

                }
                else if (command[0].equals("intersections")) {

                }
                else if (command[0].equals("search")) {

                }
                else {
                    throw new IllegalArgumentException("Illegal command: "
                        + command[0] + " (length " + command.length + ")");
                }
            }
        }

        scanner.close();
    }


    // given string, return array of commands
    private static String[] parseCommand(String command) {

        // trim and split against whitespaces
        return command.trim().split("\\s+");
    }

}
